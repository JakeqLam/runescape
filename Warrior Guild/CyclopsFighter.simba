{$I WaspLib/osrs.simba}
{$DEFINE WL_DEBUG_UPTEXT}
(******************************************************************************
* Project: Cyclops Fighter
* Author : Jake Lam
* Notes  : Fights cyclops in the Warrior guild for the defender
******************************************************************************)

var
// ─────────────────────────────────────────────────────────────
// Section: Cyclops Pathfinding
// ─────────────────────────────────────────────────────────────

  crab      : TRSObject;
  door      : TRSObject;

  westMiningSite  : TPoint := [874, 38262]; //Left side
  northMiningSite : TPoint := [1000,37742]; //top
  eastMiningSite  : TPoint := [1324,37980]; //Right side

  eastCave  : TPoint := [1308,37942];       //Right side crawl space
  westCave  : TPoint := [888,38278];        //Left side crawl space
  northCave : Tpoint := [1012,37754];       //Top side crawl space

  //State machine with default values
  currentSite,currentCave : TPoint;

  isAttacking : boolean := false;
  isCrabAlive : boolean := true;
  MAX_ATTEMPTS: Integer := 3;
  FAIL_ATTEMPTS:Integer := 0;

  player  : TPoint;

  //reporting
  timeElapsed: String;
  xp: Integer;

// ─────────────────────────────────────────────────────────────
// Section: Profile management
// ─────────────────────────────────────────────────────────────

Procedure endScript(Reason: string);
begin
  //Login.DoLogin();
  //RSClient.Image.Clear();
  TerminateScript(Reason);
end;

// ─────────────────────────────────────────────────────────────
// Section: Player Interaction
// ─────────────────────────────────────────────────────────────
procedure attackCrab();
begin
  crab.WalkInteract(['Attack']);
  Sleep(200,400);
  if MainScreen.IsUpText('Attack Gemstone Crab', False, 0.75, 100) then
    begin
      WriteLn("[" + timeElapsed +" ]: "+ 'Found Gemstone Crab, Attacking now!');
      Sleep(200,2000);
      crab.WalkInteract(['Attack']);
    end;
  Sleep(200,400);
end;

//movement
procedure goToNextCrab();
begin
  cave.WalkInteract(['Crawl-through']);
  Sleep(200,400);
  if MainScreen.IsUpText('Crawl-through Cave', False, 0.75, 100) then
    begin
      WriteLn('Found cave, Travelling to next location');
      cave.WalkInteract(['Crawl-through']);
    end;
  Sleep(200,400);
end;


// ─────────────────────────────────────────────────────────────
// Section: State Helpers
// ─────────────────────────────────────────────────────────────
procedure checkCombatState();
begin
  Sleep(2000);
  xp := XPBar.Read();
  if not XPBar.EarnedXP() then
  begin
    isAttacking := false;
    Writeln("No longer in combat");
  end
  else
  begin
    isAttacking := true;
    //Writeln("currently in combat");
  end;
end;

procedure checkCrabState();
var
  i : integer;
begin
  crab.Hover();
  if MainScreen.IsUpText('Attack Gemstone Crab', False, 0.75, 100) then
  begin
      isCrabAlive := true;
      //WriteLn('crab uptext found, still alive');
  end
  else
  begin
      writeln("[" + timeElapsed +"]: " + "Could not find crab, trying again...");
      for i := 1 to MAX_ATTEMPTS do
      Inc(FAIL_ATTEMPTS, 1);
      begin
        sleep(1500); //wait 1.5 seconds and try to find it again
        crab.Hover();
        if MainScreen.IsUpText('Attack Gemstone Crab', False, 0.75, 100) then
        begin
          writeln("[" + timeElapsed +"]: " + "Crab has been found again");
          isCrabAlive := true;
          FAIL_ATTEMPTS := 0;
        end
        else
        begin
          if not isAttacking then //if player has stopped attacking and uptext cannot be found,
          begin
            Writeln("[" + timeElapsed +"]: " + "Crab has been killed. Moving to the next area.");
            isCrabAlive := false;
          end
          else
          begin
            if i >= FAIL_ATTEMPTS then
              Writeln("Could not find crab after " + toStr(MAX_ATTEMPTS) + ". Emergency stopping script!");
              endScript("Could not find crab");
          end;
        end;
      end;
  end;
end;

procedure setupAntiBan();
begin

  Antiban.Skills := [ERSSkill.TOTAL, ERSSkill.ATTACK, ERSSkill.STRENGTH];
  Antiban.AddTask(@Antiban.SmallRandomMouse,    ONE_MINUTE * 1);
  Antiban.AddTask(@Antiban.RandomRightClick,    ONE_MINUTE * 45);
  //Antiban.AddTask(@Antiban.RandomTab,           ONE_MINUTE * 25);
  Antiban.AddTask(@Antiban.SmallCameraRotation, ONE_MINUTE * 11);
  Antiban.AddTask(@Antiban.HoverSkills,         ONE_MINUTE * 5);

  //breaks
  //Antiban.AddBreak(ONE_MINUTE*5, ONE_SECOND*40, 0.2, 0.0);   //Short break
  //Antiban.AddBreak(ONE_MINUTE*90, ONE_MINUTE*10, 0.2, 0.0);  //Moderate break
  //Antiban.AddBreak(ONE_HOUR*8, ONE_HOUR*5, 0.2, 0.8);        //Sleep
  Antiban.DoAntiban();
end;

procedure setCrabLocation();
var
    dW, dE, dN: Double;
begin
    //writeLn('DEBUG:Current position: ' + toStr(player));

    //caculate the players distance to each of the three mining sites
    dW := player.DistanceTo(westMiningSite);
    dE := player.DistanceTo(eastMiningSite);
    dN := player.DistanceTo(northMiningSite);

    //get the closest mining site and set the crab and location
    if (dW <= dE) and (dW <= dN) then
    begin
        currentSite := westMiningSite;
        currentCave := westCave;
        crab := crab.Create(@Map.Walker,[1,1,7],[westMiningSite],['Gemstone', 'Crab']);
        cave := cave.Create(@Map.Walker,[1,1,7],[westCave],['Cave']);
        WriteLn("[" + timeElapsed +"]: " + "Crab location found at West site ");
    end
    else if (dE <= dN) then
    begin
        currentSite := eastMiningSite;
        currentCave := eastCave;
        crab := crab.Create(@Map.Walker,[1,1,7],[eastMiningSite],['Gemstone', 'Crab']);
        cave := cave.Create(@Map.Walker,[1,1,7],[eastCave],['Cave']);
        WriteLn("[" + timeElapsed +"]: " + "Crab location found at East site ");
    end
    else
    begin
        currentSite := northMiningSite;
        currentCave := northCave;
        crab := crab.Create(@Map.Walker,[1,1,7],[northMiningSite],['Gemstone', 'Crab']);
        cave := cave.Create(@Map.Walker,[1,1,7],[northCave],['Cave']);
        WriteLn("[" + timeElapsed +"]: " + "Crab location found at North site");
    end;

    Sleep(500);
end;
// ─────────────────────────────────────────────────────────────
// Section: Reporting
// ─────────────────────────────────────────────────────────────

procedure printProgReport();
begin
  Writeln("+ Gemstone Crab Fighter  ------------+");
  Writeln("| Total Time Elapsed:       " + timeElapsed + " |");
  Writeln("| Bot Time:                 " + toStr(Logger.TimeRunning.ElapsedFmt(TIME_SHORT)) + " |");
  Writeln("| Antiban Time:             " + toStr(Antiban.TimeRunning.ElapsedFmt(TIME_SHORT)) + " | ");
  Writeln("| You have gained:              " + toStr(XPBar.TotalEarnedXP) + " XP |");
  Writeln("+------------------------------------+");
end;

// ─────────────────────────────────────────────────────────────
// Section: Initializing Fighter
// ─────────────────────────────────────────────────────────────
procedure init();
begin
  if (not RSClient.IsLoggedIn) then
    Login.DoLogin();
  timeElapsed := toStr(GetTimeStamp(TIME_SHORT));
  printProgReport();
  Map.Setup([Chunk(Box(19,49,21,47), 0)]); //Gemstone crab locations in ttlai forest
  player := Map.Position(); //Player
  RSMouseZoom.Scroll(-18);
  setCrabLocation();
  setupAntiBan();

  //Begin Loop
  while True do
  begin
    timeElapsed := toStr(GetTimeStamp(TIME_SHORT));
    checkCombatState();
    checkCrabState();
    Antiban.DismissRandom();
    Antiban.DoAntiban();
    Sleep(1500,2700);

    //if you are out of combat and the crab is dead. Move to the next location
    if not isAttacking and not isCrabAlive then
    begin
      printProgReport();
      goToNextCrab();
      Sleep(6000);
      player := Map.Position(); //Player
      setCrabLocation();    //recalibrate
      Sleep(1000,2000);
      attackCrab();
    end
    else if not isAttacking and isCrabAlive then
    begin
        Writeln("[ " + timeElapsed +" ]: " + "Crab found, Attacking again");
        attackCrab();
    end;
  end;
end;

begin
  init();
end.

