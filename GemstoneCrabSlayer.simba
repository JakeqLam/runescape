{$I WaspLib/osrs.simba}
{$DEFINE WL_DEBUG_UPTEXT}
(******************************************************************************
* Project: Gemstone Crab Fighter
* Author : Jake Lam
* Notes  : Needs to be started at the Gemstone Crab Mining site
******************************************************************************)

var
// ─────────────────────────────────────────────────────────────
// Section: Gemstone Crab Settings
// Please fill out the following variables before starting the bot
// ─────────────────────────────────────────────────────────────

  LOGIN_NAME        = 'GoogelFoo';     //Username/Email
  LOGIN_PASS        = '@Brad8928828';  //Password
  PPIN              = '';              //Bank pin

//Login values
  profile : TProfile;

// Gemstone Crab Pathfinding
  crab,cave : TRSObject;

  westMiningSite  : TPoint := [874, 38262]; //Left side
  northMiningSite : TPoint := [1000,37742]; //top
  eastMiningSite  : TPoint := [1324,37980]; //Right side

  eastCave  : TPoint := [1308,37942];       //Right side crawl space
  westCave  : TPoint := [888,38278];        //Left side crawl space
  northCave : Tpoint := [1012,37754];       //Top side crawl space

  player  : TPoint;

  //State machine with default values
  currentSite,currentCave : TPoint;

  isAttacking : boolean := false;
  isCrabAlive : boolean := true;
  MAX_ATTEMPTS: Integer := 10;

  //Reporting values
  timeElapsed: String;
  timer  : TStopWatch;
  xp: Integer;

// ─────────────────────────────────────────────────────────────
// Section: Profile and time management
// ─────────────────────────────────────────────────────────────
Procedure endScript(Reason: string);
begin
  TerminateScript(Reason);
end;

Procedure setupLogin();
begin
  profile.Name          := LOGIN_NAME;
  profile.Username      := LOGIN_PASS;
  profile.Password      := PPIN;
  //profile.World         := world;      // 0 = let client pick; or set a world number
  Profiles.Add(LOGIN_NAME,LOGIN_PASS,PPIN);
end;

// ─────────────────────────────────────────────────────────────
// Section: Player Interaction
// ─────────────────────────────────────────────────────────────
procedure attackCrab();
begin
  crab.WalkInteract(['Attack']);
  Sleep(200,400);
  if MainScreen.IsUpText('Attack Gemstone Crab', False, 0.75, 100) then
    begin
      WriteLn("[" + timeElapsed +"]: "+ 'Found Gemstone Kreb!, Attacking now ⚔️');
      Sleep(200,2000);
      crab.WalkInteract(['Attack']);
    end;
  Sleep(200,400);
end;

//movement
procedure goToNextCrab();
begin
  cave.WalkInteract(['Crawl-through']);
  Sleep(200,400);
  if MainScreen.IsUpText('Crawl-through Cave', False, 0.75, 100) then
    begin
      WriteLn("[" + timeElapsed +"]: "+ 'Found cave, Travelling to next location 🗻');
      cave.WalkInteract(['Crawl-through']);
    end;
  Sleep(200,400);
end;

//Pathfinding to closest crab
procedure setCrabLocation();
var
    dW, dE, dN: Double;
begin
    //writeLn('DEBUG:Current position: ' + toStr(player));

    //caculate the players distance to each of the three mining sites
    dW := player.DistanceTo(westMiningSite);
    dE := player.DistanceTo(eastMiningSite);
    dN := player.DistanceTo(northMiningSite);

    //get the closest mining site and set the crab and location
    if (dW <= dE) and (dW <= dN) then
    begin
        currentSite := westMiningSite;
        currentCave := westCave;
        crab := crab.Create(@Map.Walker,[1,1,7],[westMiningSite],['Gemstone', 'Crab']);
        cave := cave.Create(@Map.Walker,[1,1,7],[westCave],['Cave']);
        WriteLn("[" + timeElapsed +"]: " + "Crab location found at West site 📍🏜️");
    end
    else if (dE <= dN) then
    begin
        currentSite := eastMiningSite;
        currentCave := eastCave;
        crab := crab.Create(@Map.Walker,[1,1,7],[eastMiningSite],['Gemstone', 'Crab']);
        cave := cave.Create(@Map.Walker,[1,1,7],[eastCave],['Cave']);
        WriteLn("[" + timeElapsed +"]: " + "Crab location found at East site 📍🐪  ");
    end
    else
    begin
        currentSite := northMiningSite;
        currentCave := northCave;
        crab := crab.Create(@Map.Walker,[1,1,7],[northMiningSite],['Gemstone', 'Crab']);
        cave := cave.Create(@Map.Walker,[1,1,7],[northCave],['Cave']);
        WriteLn("[" + timeElapsed +"]: " + "Crab location found at North site 📍⛄");
    end;

    Sleep(500);
end;

// ─────────────────────────────────────────────────────────────
// Section: State Helpers
// ─────────────────────────────────────────────────────────────
procedure checkCombatState();
begin
  Sleep(2000);
  xp := XPBar.Read();
  if not XPBar.EarnedXP() then
  begin
    isAttacking := false;
    Writeln("No longer in combat");
  end
  else
  begin
    isAttacking := true;
    //Writeln("currently in combat");
  end;
end;

procedure checkCrabState();
var
  i : integer;
begin
  sleep(2000);
  crab.Hover();
  if MainScreen.IsUpText('Attack Gemstone Crab', False, 0.75, 100) then
  begin
      isCrabAlive := true;
      //WriteLn('crab uptext found, still alive');
  end
  else
  begin
      writeln("[" + timeElapsed +"]: " + "Could not find crab, trying again...");
      for i := 1 to MAX_ATTEMPTS do
      begin
        checkCombatState();
        sleep(1500); //wait 1.5 seconds and try to find it again
        crab.Hover();
        if MainScreen.IsUpText('Attack Gemstone Crab', False, 0.75, 100) then
        begin
          writeln("[" + timeElapsed +"]: " + "Crab has been found again 🔎🦀");
          attackCrab();
          isCrabAlive := true;
          break;
        end
        else
        begin
          if not isAttacking then //if player has stopped attacking and uptext cannot be found,
          begin
            Writeln("[" + timeElapsed +"]: " + "Crab is not here. Attempting to navigate to closest crab.");
            isCrabAlive := false;
            break;
          end;
        end;

        //Recalibrate world position after 8 failed attempts
        if i = 8 then
        begin
          Writeln("[" + timeElapsed +"]: " + "Resetting Navigation");
          player := Map.Position(); //Player
          setCrabLocation();
          Sleep(4000);
          goToNextCrab();
        end;
        if i = MAX_ATTEMPTS then
          endScript("Failed to navigate to crab");
      end;
  end;
end;

procedure setupAntiBan();
begin

  Antiban.Skills := [ERSSkill.DEFENCE, ERSSkill.ATTACK, ERSSkill.STRENGTH];
  Antiban.AddTask(@Antiban.SmallRandomMouse,    ONE_MINUTE * 1);
  Antiban.AddTask(@Antiban.RandomRightClick,    ONE_MINUTE * 45);
  //Antiban.AddTask(@Antiban.RandomTab,           ONE_MINUTE * 25);
  Antiban.AddTask(@Antiban.SmallCameraRotation, ONE_MINUTE * 11);
  //Antiban.AddTask(@Antiban.HoverSkills,         ONE_MINUTE * 5);

  //breaks
  //Antiban.AddBreak(ONE_MINUTE*5, ONE_SECOND*40, 0.2, 0.0);   //Short break
  Antiban.AddBreak(ONE_MINUTE*30, ONE_MINUTE*60, 0.2, 0.0);  //Moderate break
  //Antiban.AddBreak(ONE_HOUR*8, ONE_HOUR*5, 0.2, 0.8);        //Sleep
  Antiban.DoAntiban();
end;

// ─────────────────────────────────────────────────────────────
// Section: Reporting
// ─────────────────────────────────────────────────────────────

procedure printProgReport();
begin
  Writeln("");
  Writeln("+ 💎 Gemstone Crab Fighter 🦀 --------+");
  Writeln("| Total Time Elapsed:       " + timeElapsed + "  |");
  Writeln("| Bot Time:                 " + toStr(Logger.TimeRunning.ElapsedFmt(TIME_SHORT)) + "  |");
  Writeln("| Antiban Time:             " + toStr(Antiban.TimeRunning.ElapsedFmt(TIME_SHORT)) + "  | ");
  Writeln("+-------------------------------------+");
  Writeln("");
  Writeln("+------------ XP Gained --------------+");
  Writeln("| You have gained: " + toStr(XPBar.TotalEarnedXP) + " XP    ");
  Writeln("| Experience Per Hour: " + toStr((XPBar.TotalEarnedXP/(timer.Elapsed/1000))*3600) + " xp/hr ");
  Writeln("+------------ XP Gained --------------+");
  Writeln("");
end;

// ─────────────────────────────────────────────────────────────
// Section: Initializing Fighter
// ─────────────────────────────────────────────────────────────
procedure init();
begin
  setupLogin();
  if (not RSClient.IsLoggedIn) then
    Login.DoLogin(profile);
  timeElapsed := toStr(GetTimeStamp(TIME_SHORT));
  timer.Start();
  printProgReport();
  Map.Setup([Chunk(Box(19,49,21,47), 0)]); //Gemstone crab locations in ttlai forest
  player := Map.Position(); //Player
  setCrabLocation();
  setupAntiBan();

  //Begin Loop
  while True do
  begin
    timeElapsed := toStr(GetTimeStamp(TIME_SHORT));
    player := Map.Position(); //Player Position
    checkCombatState();
    checkCrabState();
    Antiban.DismissRandom();
    Antiban.DoAntiban();
    Sleep(1500,2700);

    if Chat.LeveledUp() then
    begin
      Writeln("[" + timeElapsed +" ]: " + "Closing chat dialog");
      Chat.Continue();
    end;
    //if you are out of combat and the crab is dead. Move to the next location
    if not isAttacking and not isCrabAlive then
    begin
      printProgReport();
      goToNextCrab();
      Sleep(6000);
      player := Map.Position(); //Player Position
      setCrabLocation();    //recalibrate
      Sleep(1000,2000);
      attackCrab();
    end
    else if not isAttacking and isCrabAlive then
    begin
        Writeln("[" + timeElapsed +" ]: " + "Crab found, Attacking again ⚔️");
        attackCrab();
    end;
  end;
end;

begin
  init();
end.

