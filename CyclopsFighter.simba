{$I WaspLib/osrs.simba}
{$DEFINE WL_DEBUG_UPTEXT}
(******************************************************************************
* Project: Cyclops Fighter
* Author : Jake Lam
* Notes  :
******************************************************************************)

var
// ─────────────────────────────────────────────────────────────
// Section: Fighter Settings
// Please fill out the following variables before starting the bot
// ─────────────────────────────────────────────────────────────

  LOGIN_NAME  = 'GoogelFoo';     //Username/Email
  LOGIN_PASS  = '@Brad8928828';  //Password
  PPIN        = '';              //Bank pin

  //Mob Name
  mobName     := "Cyclops";
  food        := "Lobster";
  lootList    := ["Willow Logs","Gold", "Defender"];
  hpThreshold := 45;

  //Location Values
  //MAP_CHUNK  :=  [Chunk(Box(44,55,45,55), 0)]

// ─────────────────────────────────────────────────────────────
// ─────────────────────────────────────────────────────────────
  //Login values
  profile : TProfile;

  //Mob Pathfinding
  mob,loot      : TRSObject;
  player, pt    : TPoint;
  mmMobPts, msMobPts : TPointArray;
  region        : TBox;
  path          : TGraphNodeArray;

  //Interactable objects
  WGBank : TPoint := [7276, 36258];

  //State machine with default values
  Consumer : TRSConsumables;
  nearestTarget: TPoint;

  isAttacking : boolean := false;
  isMobAlive : boolean := true;
  MAX_ATTEMPTS: Integer := 10;

  //Reporting values
  timeElapsed: String;
  timer  : TStopWatch;
  xp: Integer;
  hp : Integer;

// ─────────────────────────────────────────────────────────────
// Section: Profile and time management
// ─────────────────────────────────────────────────────────────
Procedure endScript(Reason: string);
begin
  TerminateScript(Reason);
end;

Procedure setupLogin();
begin
  profile.Name          := LOGIN_NAME;
  profile.Username      := LOGIN_PASS;
  profile.Password      := PPIN;
  //profile.World         := world;      // 0 = let client pick; or set a world number
  Profiles.Add(LOGIN_NAME,LOGIN_PASS,PPIN);
end;

// ─────────────────────────────────────────────────────────────
// Section: State Helpers
// ─────────────────────────────────────────────────────────────
procedure resetPlayerPos();
begin
  player := Map.Position(); //Player Position
end;

procedure checkCombatState();
begin
  xp := XPBar.Read();
  if not XPBar.EarnedXP() then
  begin
    isAttacking := false;
    Writeln("[" + timeElapsed +"]: " + "No longer in combat");
  end
  else
  begin
    isAttacking := true;
    //Writeln("currently in combat");
  end;
end;

procedure setupAntiBan();
begin

  Antiban.Skills := [ERSSkill.DEFENCE, ERSSkill.ATTACK, ERSSkill.STRENGTH];
  Antiban.AddTask(@Antiban.SmallRandomMouse,    ONE_MINUTE * 1);
  Antiban.AddTask(@Antiban.RandomRightClick,    ONE_MINUTE * 45);
  //Antiban.AddTask(@Antiban.RandomTab,           ONE_MINUTE * 25);
  Antiban.AddTask(@Antiban.SmallCameraRotation, ONE_MINUTE * 11);
  //Antiban.AddTask(@Antiban.HoverSkills,         ONE_MINUTE * 5);

  //Antiban.AddBreak(ONE_MINUTE*5, ONE_SECOND*40, 0.2, 0.0);   //Short break
  //Antiban.AddBreak(ONE_MINUTE*90, ONE_MINUTE*10, 0.2, 0.0);  //Moderate break
  Antiban.DoAntiban();
end;

// ─────────────────────────────────────────────────────────────
// Section: Player Interaction
// ─────────────────────────────────────────────────────────────

//Get the closest mob and set the target
procedure setNearestTarget();
var
  i: Integer;
begin

  writeLn('[DEBUG]:Current position: ' + toStr(player));

  with Minimap.Bounds do
    region := Box(X1+30, Y1+30, X2-30, Y2-30);
  mmMobPts := Minimap.GetDots(ERSMinimapDot.NPC);
  SetLength(msMobPts, Length(mmMobPts));
  for i := 0 to High(mmMobPts) do
    msMobPts[i] := Map.Walker.MM2Map(player, mmMobPts[i], Minimap.CompassRadians); // returns global map coords
  nearestTarget := Map.Walker.GetClosestPoint(player, msMobPts, path);                 // returns closest by the loaded web-graph :contentReference[oaicite:3]{index=3}
  mob := mob.Create(@Map.Walker,[1,1,7],[nearestTarget],[mobName]);

  mob.Hover();
  if MainScreen.IsUpText('Attack ' + mobName, False, 0.75, 100) then
    begin
      if not isAttacking then
      begin
        WriteLn("[" + timeElapsed +"]: "+ 'Found ' + mobName + ', Attacking now ⚔️');
        mob.WalkInteract(['Attack']);
        isAttacking := true;
      end;
  end;

  Sleep(500);
end;

//loot items from players item list
procedure lootItems();
var
  mmItemPts, msItemPts : TPointArray;
  i : Integer;
  nearestLoot : TPoint;

begin
  with Minimap.Bounds do
    region := Box(X1+30, Y1+30, X2-30, Y2-30);
  mmItemPts := Minimap.GetDots(ERSMinimapDot.ITEM);
  SetLength(msItemPts, Length(mmItemPts));
  for i := 0 to High(mmItemPts) do
    msItemPts[i] := Map.Walker.MM2Map(player, msItemPts[i], Minimap.CompassRadians); // returns global map coords

  nearestLoot := Map.Walker.GetClosestPoint(player, msMobPts, path);

  loot := loot.Create(@Map.Walker,[1,1,7],[nearestLoot],[lootList[0]]);
  writeLn('Looting item: ' + toStr(lootList[0]));
end;

//Heal if hp is low
procedure healHP();
var
  assets, jsonPath: String;

begin
    if not Consumables.Has(ERSConsumable.FOOD) then
    begin
      WriteLn('No food found (e.g., Lobster).');
    end;

    hp := Minimap.GetLevel(ERSMinimapOrb.HITPOINTS);
    if hp <= hpThreshold then
    begin
      writeln("["+timeElapsed+"]: "+'HP is low. Eating '+food+" You have: "+toStr(Consumer.Count(ERSConsumable.FOOD)) + " left");
      Consumer.Consume(ERSConsumable.FOOD);
      writeln("[" + timeElapsed +"]: " + 'Current HP: ' + toStr(hp));
    end;
end;

// ─────────────────────────────────────────────────────────────
// Section: Reporting
// ─────────────────────────────────────────────────────────────

procedure printProgReport();
begin
  Writeln("");
  Writeln("+ Warrior Guild Fighter ⚔️ -----------+");
  Writeln("| Total Time Elapsed:       " + timeElapsed + "  |");
  Writeln("| Bot Time:                 " + toStr(Logger.TimeRunning.ElapsedFmt(TIME_SHORT)) + "  |");
  Writeln("| Antiban Time:             " + toStr(Antiban.TimeRunning.ElapsedFmt(TIME_SHORT)) + "  | ");
  Writeln("+-------------------------------------+");
  Writeln("");
  Writeln("+------------ XP Gained --------------+");
  Writeln("| You have gained: " + toStr(XPBar.TotalEarnedXP) + " XP    ");
  Writeln("| Experience Per Hour: " + toStr((XPBar.TotalEarnedXP/(timer.Elapsed/1000))*3600) + " xp/hr ");
  Writeln("+------------ XP Gained --------------+");
  Writeln("");
end;

// ─────────────────────────────────────────────────────────────
// Section: Initializing Fighter with settings
// ─────────────────────────────────────────────────────────────
procedure init();
begin

  setupLogin();
  if not RSClient.IsLoggedIn then
    Login.DoLogin(profile);

  timeElapsed := toStr(GetTimeStamp(TIME_SHORT));
  timer.Start();
  printProgReport();

  Consumer.Setup();
  Consumer.find(ERSConsumable.FOOD);
  Map.Setup([Chunk(Box(44,55,45,55), 0)]);//Warriors Guild

  resetPlayerPos(); //Player
  RSMouseZoom.Scroll(-2);
  setupAntiBan();

  //setNearestTarget();

  //Begin Loop
  while True do
  begin
    timeElapsed := toStr(GetTimeStamp(TIME_SHORT));

    Antiban.DoAntiban();
    Sleep(1500,2700);

    //Removing dialog from chat box
    if Chat.LeveledUp() then
    begin
      Writeln("[" + timeElapsed +" ]: " + "Closing chat dialog");
      Chat.Continue();
    end;
    healHP();
    checkCombatState();
    resetPlayerPos(); //Player Position
    //lootItems();
    Sleep(1000,5000);

    //if you are out of combat and the Mob is dead. Move to the next location
    if not isAttacking then
    begin
      printProgReport();

      resetPlayerPos(); //Player Position
      Sleep(300);
      setNearestTarget();    //recalibrate
      Sleep(1000,2000);
    end;
  end;
end;

begin
  init();
end.

